# NatLink macro definitions for NaturallySpeaking
# Generated by vcl2py 2.5, Fri May 13 18:07:55 2005

import natlink
from natlinkutils import *
from VocolaUtils import *

class ThisGrammar(GrammarBase):

    gramSpec = """
        <dgndictation> imported;
        <Letters> = ('Alpha' | 'Bravo' | 'Charlie' | 'Delta' | 'Echo' | 'Foxtrot' | 'Golf' | 'Hotel' | 'India' | 'Juliet' | 'Kilo' | 'Lima' | 'Mike' | 'November' | 'Oscar' | 'Papa' | 'Quebec' | 'Romeo' | 'Sierra' | 'Tango' | 'Uniform' | 'Victor' | 'Whiskey' | 'X-ray' | 'Yankee' | 'Zulu' ) ;
        <Directions> = ('Up' | 'Right' | 'Left' | 'Down' | 'Enter' | 'Delete' | 'Backspace' ) ;
        <Count> = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10) ;
        <Modifiers> = ('Alt' | 'Control' | 'Shift' ) ;
        <1> = 'runs the command' ;
        <2> = 'is equivalent to' ;
        <3> = 'new keystroke' [ 'insert' ] ;
        <4> = 'new list' [ 'insert' ] ;
        <5> = 'refresh macros' ;
        <6> = 'dollar' <Count> ;
        <7> = 'direction' <Directions> ;
        <8> = 'direction' <Directions> <Count> ;
        <9> = 'direction' <9b> ;
        <9b> = <Directions> 'dollar' <Count> ;
        <10> = (('Alt' | 'Control' | 'Shift' ) ) <Letters> ;
        <11> = (('Alt' | 'Control' | 'Shift' ) ) <Letters> <Count> ;
        <12> = <Modifiers> <Letters> 'dollar' <Count> ;
        <13> = (('Alt' | 'Control' | 'Shift' ) ) <Modifiers> <Letters> ;
        <14> = (('Alt' | 'Control' | 'Shift' ) ) [ 'direction' ] <Directions> ;
        <15> = (('Alt' | 'Control' | 'Shift' ) ) [ 'direction' ] <Directions> <Count> ;
        <16> = <16a> 'dollar' <Count> ;
        <16a> = <Modifiers> [ 'direction' ] <Directions> ;
        <17> = (('Alt' | 'Control' | 'Shift' ) ) <17b> ;
        <17b> = <Modifiers> [ 'direction' ] <Directions> ;
        <18> = (('Alt' | 'Control' | 'Shift' ) ) <18b> ;
        <18b> = <Modifiers> [ 'direction' ] <Directions> <Count> ;
        <19> = <19a> 'dollar' <Count> ;
        <19a> = <Modifiers> <Modifiers> [ 'direction' ] <Directions> ;
        <20> = 'insert range' (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99) 'to' (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99) ;
        <21> = 'insert Repeat' ;
        <22> = 'insert Active Menu Pick' ;
        <23> = 'insert Active Control Pick' ;
        <24> = 'insert App Bring Up' ;
        <25> = 'insert App Swap With' ;
        <26> = 'insert Beep' ;
        <27> = 'insert Left Button Click' ;
        <28> = 'insert Right Button Click' ;
        <29> = 'insert Left Button Double Click' ;
        <30> = 'insert Right Button Double Click' ;
        <31> = 'insert Clear Desktop' ;
        <32> = 'insert Control Pick' ;
        <33> = 'insert DDE Execute' ;
        <34> = 'insert DDE Poke' ;
        <35> = 'insert DLL Call' ;
        <36> = 'insert Drag To Point' ('Left' | 'Right' | 'Middle' ) ;
        <37> = 'insert eval' ;
        <38> = 'insert Go To Sleep' ;
        <39> = 'insert Menu Cancel' ;
        <40> = 'insert MenuPick' ;
        <41> = 'insert Mouse Grid' ;
        <42> = 'insert Message box confirm' ;
        <43> = 'insert Play Sound' ;
        <44> = 'insert Remember Point' ;
        <45> = 'insert Repeat' ;
        <46> = 'insert Run Script File' ;
        <47> = 'insert Send Keys' ;
        <48> = 'insert Send System Keys' ;
        <49> = 'insert Set Microphone' ('On' | 'Off' ) ;
        <50> = 'insert Set Natural Text' ;
        <51> = 'insert ShellExecute' ;
        <52> = 'insert Shift Key' ('Shift' | 'Control' | 'Alt' ) ;
        <53> = 'insert TTS Play String' ;
        <54> = 'insert Wait' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 | 132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 | 143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 | 154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 | 164 | 165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 | 175 | 176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 | 186 | 187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 | 197 | 198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 | 219 | 220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 | 230 | 231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 | 241 | 242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 | 252 | 253 | 254 | 255 | 256 | 257 | 258 | 259 | 260 | 261 | 262 | 263 | 264 | 265 | 266 | 267 | 268 | 269 | 270 | 271 | 272 | 273 | 274 | 275 | 276 | 277 | 278 | 279 | 280 | 281 | 282 | 283 | 284 | 285 | 286 | 287 | 288 | 289 | 290 | 291 | 292 | 293 | 294 | 295 | 296 | 297 | 298 | 299 | 300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308 | 309 | 310 | 311 | 312 | 313 | 314 | 315 | 316 | 317 | 318 | 319 | 320 | 321 | 322 | 323 | 324 | 325 | 326 | 327 | 328 | 329 | 330 | 331 | 332 | 333 | 334 | 335 | 336 | 337 | 338 | 339 | 340 | 341 | 342 | 343 | 344 | 345 | 346 | 347 | 348 | 349 | 350 | 351 | 352 | 353 | 354 | 355 | 356 | 357 | 358 | 359 | 360 | 361 | 362 | 363 | 364 | 365 | 366 | 367 | 368 | 369 | 370 | 371 | 372 | 373 | 374 | 375 | 376 | 377 | 378 | 379 | 380 | 381 | 382 | 383 | 384 | 385 | 386 | 387 | 388 | 389 | 390 | 391 | 392 | 393 | 394 | 395 | 396 | 397 | 398 | 399 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 425 | 426 | 427 | 428 | 429 | 430 | 431 | 432 | 433 | 434 | 435 | 436 | 437 | 438 | 439 | 440 | 441 | 442 | 443 | 444 | 445 | 446 | 447 | 448 | 449 | 450 | 451 | 452 | 453 | 454 | 455 | 456 | 457 | 458 | 459 | 460 | 461 | 462 | 463 | 464 | 465 | 466 | 467 | 468 | 469 | 470 | 471 | 472 | 473 | 474 | 475 | 476 | 477 | 478 | 479 | 480 | 481 | 482 | 483 | 484 | 485 | 486 | 487 | 488 | 489 | 490 | 491 | 492 | 493 | 494 | 495 | 496 | 497 | 498 | 499 | 500 | 501 | 502 | 503 | 504 | 505 | 506 | 507 | 508 | 509 | 510 | 511 | 512 | 513 | 514 | 515 | 516 | 517 | 518 | 519 | 520 | 521 | 522 | 523 | 524 | 525 | 526 | 527 | 528 | 529 | 530 | 531 | 532 | 533 | 534 | 535 | 536 | 537 | 538 | 539 | 540 | 541 | 542 | 543 | 544 | 545 | 546 | 547 | 548 | 549 | 550 | 551 | 552 | 553 | 554 | 555 | 556 | 557 | 558 | 559 | 560 | 561 | 562 | 563 | 564 | 565 | 566 | 567 | 568 | 569 | 570 | 571 | 572 | 573 | 574 | 575 | 576 | 577 | 578 | 579 | 580 | 581 | 582 | 583 | 584 | 585 | 586 | 587 | 588 | 589 | 590 | 591 | 592 | 593 | 594 | 595 | 596 | 597 | 598 | 599 | 600 | 601 | 602 | 603 | 604 | 605 | 606 | 607 | 608 | 609 | 610 | 611 | 612 | 613 | 614 | 615 | 616 | 617 | 618 | 619 | 620 | 621 | 622 | 623 | 624 | 625 | 626 | 627 | 628 | 629 | 630 | 631 | 632 | 633 | 634 | 635 | 636 | 637 | 638 | 639 | 640 | 641 | 642 | 643 | 644 | 645 | 646 | 647 | 648 | 649 | 650 | 651 | 652 | 653 | 654 | 655 | 656 | 657 | 658 | 659 | 660 | 661 | 662 | 663 | 664 | 665 | 666 | 667 | 668 | 669 | 670 | 671 | 672 | 673 | 674 | 675 | 676 | 677 | 678 | 679 | 680 | 681 | 682 | 683 | 684 | 685 | 686 | 687 | 688 | 689 | 690 | 691 | 692 | 693 | 694 | 695 | 696 | 697 | 698 | 699 | 700 | 701 | 702 | 703 | 704 | 705 | 706 | 707 | 708 | 709 | 710 | 711 | 712 | 713 | 714 | 715 | 716 | 717 | 718 | 719 | 720 | 721 | 722 | 723 | 724 | 725 | 726 | 727 | 728 | 729 | 730 | 731 | 732 | 733 | 734 | 735 | 736 | 737 | 738 | 739 | 740 | 741 | 742 | 743 | 744 | 745 | 746 | 747 | 748 | 749 | 750 | 751 | 752 | 753 | 754 | 755 | 756 | 757 | 758 | 759 | 760 | 761 | 762 | 763 | 764 | 765 | 766 | 767 | 768 | 769 | 770 | 771 | 772 | 773 | 774 | 775 | 776 | 777 | 778 | 779 | 780 | 781 | 782 | 783 | 784 | 785 | 786 | 787 | 788 | 789 | 790 | 791 | 792 | 793 | 794 | 795 | 796 | 797 | 798 | 799 | 800 | 801 | 802 | 803 | 804 | 805 | 806 | 807 | 808 | 809 | 810 | 811 | 812 | 813 | 814 | 815 | 816 | 817 | 818 | 819 | 820 | 821 | 822 | 823 | 824 | 825 | 826 | 827 | 828 | 829 | 830 | 831 | 832 | 833 | 834 | 835 | 836 | 837 | 838 | 839 | 840 | 841 | 842 | 843 | 844 | 845 | 846 | 847 | 848 | 849 | 850 | 851 | 852 | 853 | 854 | 855 | 856 | 857 | 858 | 859 | 860 | 861 | 862 | 863 | 864 | 865 | 866 | 867 | 868 | 869 | 870 | 871 | 872 | 873 | 874 | 875 | 876 | 877 | 878 | 879 | 880 | 881 | 882 | 883 | 884 | 885 | 886 | 887 | 888 | 889 | 890 | 891 | 892 | 893 | 894 | 895 | 896 | 897 | 898 | 899 | 900 | 901 | 902 | 903 | 904 | 905 | 906 | 907 | 908 | 909 | 910 | 911 | 912 | 913 | 914 | 915 | 916 | 917 | 918 | 919 | 920 | 921 | 922 | 923 | 924 | 925 | 926 | 927 | 928 | 929 | 930 | 931 | 932 | 933 | 934 | 935 | 936 | 937 | 938 | 939 | 940 | 941 | 942 | 943 | 944 | 945 | 946 | 947 | 948 | 949 | 950 | 951 | 952 | 953 | 954 | 955 | 956 | 957 | 958 | 959 | 960 | 961 | 962 | 963 | 964 | 965 | 966 | 967 | 968 | 969 | 970 | 971 | 972 | 973 | 974 | 975 | 976 | 977 | 978 | 979 | 980 | 981 | 982 | 983 | 984 | 985 | 986 | 987 | 988 | 989 | 990 | 991 | 992 | 993 | 994 | 995 | 996 | 997 | 998 | 999 | 1000) ;
        <55> = 'insert Wake Up' ;
        <56> = 'insert WinHelp' ;
        <57> = 'insert Set Mouse Position' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99) 'by' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10) ;
        <58> = 'next word' <dgndictation> ;
        <59> = 'nsert Heard Word' <dgndictation> ;
        <60> = 'new choice list' ;
        <61> = 'or' ;
        <62> = 'control key' <Modifiers> ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<7>|<8>|<9>|<10>|<11>|<12>|<13>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<28>|<29>|<30>|<31>|<32>|<33>|<34>|<35>|<36>|<37>|<38>|<39>|<40>|<41>|<42>|<43>|<44>|<45>|<46>|<47>|<48>|<49>|<50>|<51>|<52>|<53>|<54>|<55>|<56>|<57>|<58>|<59>|<60>|<61>|<62>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        # Return if wrong application
        window = matchWindow(moduleInfo,'vcledit','')
        if not window: return None
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                self.activate(rule,window)

    def get_Letters(self, word):
        actions = Value()
        if word == 'Alpha':
            actions.augment('a')
        elif word == 'Bravo':
            actions.augment('b')
        elif word == 'Charlie':
            actions.augment('c')
        elif word == 'Delta':
            actions.augment('d')
        elif word == 'Echo':
            actions.augment('e')
        elif word == 'Foxtrot':
            actions.augment('f')
        elif word == 'Golf':
            actions.augment('g')
        elif word == 'Hotel':
            actions.augment('h')
        elif word == 'India':
            actions.augment('i')
        elif word == 'Juliet':
            actions.augment('j')
        elif word == 'Kilo':
            actions.augment('k')
        elif word == 'Lima':
            actions.augment('l')
        elif word == 'Mike':
            actions.augment('m')
        elif word == 'November':
            actions.augment('n')
        elif word == 'Oscar':
            actions.augment('o')
        elif word == 'Papa':
            actions.augment('p')
        elif word == 'Quebec':
            actions.augment('q')
        elif word == 'Romeo':
            actions.augment('r')
        elif word == 'Sierra':
            actions.augment('s')
        elif word == 'Tango':
            actions.augment('t')
        elif word == 'Uniform':
            actions.augment('u')
        elif word == 'Victor':
            actions.augment('v')
        elif word == 'Whiskey':
            actions.augment('w')
        elif word == 'X-ray':
            actions.augment('x')
        elif word == 'Yankee':
            actions.augment('y')
        elif word == 'Zulu':
            actions.augment('z')
        return actions

    def get_Directions(self, word):
        actions = Value()
        if word == 'Up':
            actions.augment('Up')
        elif word == 'Right':
            actions.augment('Right')
        elif word == 'Left':
            actions.augment('Left')
        elif word == 'Down':
            actions.augment('Down')
        elif word == 'Enter':
            actions.augment('Enter')
        elif word == 'Delete':
            actions.augment('Del')
        elif word == 'Backspace':
            actions.augment('Backspace')
        return actions

    def get_Count(self, word):
        actions = Value()
        actions.augment(word)
        return actions

    def get_Modifiers(self, word):
        actions = Value()
        if word == 'Alt':
            actions.augment('Alt')
        elif word == 'Control':
            actions.augment('Ctrl')
        elif word == 'Shift':
            actions.augment('Shift')
        return actions

    # runs the command
    def gotResults_1(self, words, fullResults):
        actions = Value()
        actions.augment(' =  ;')
        actions.augment('{Left 2}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_1(words[1:], fullResults)

    # is equivalent to
    def gotResults_2(self, words, fullResults):
        actions = Value()
        actions.augment(' =  |')
        actions.augment('{Left 2}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_2(words[1:], fullResults)

    # new keystroke [insert]
    def gotResults_3(self, words, fullResults):
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'insert':
            fullResults.insert(opt, 'dummy')
        actions = Value()
        actions.augment('{end}{Left 2}')
        actions.augment('{}{Left}')
        actions.perform()
        self.firstWord += 2
        if len(words) > 2: self.gotResults_3(words[2:], fullResults)

    # new list [insert]
    def gotResults_4(self, words, fullResults):
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'insert':
            fullResults.insert(opt, 'dummy')
        actions = Value()
        actions.augment('{Left}{Ctrl+Right}')
        actions.augment(' <> ')
        actions.augment('{Left 2}')
        actions.perform()
        self.firstWord += 2
        if len(words) > 2: self.gotResults_4(words[2:], fullResults)

    # refresh macros
    def gotResults_5(self, words, fullResults):
        actions = Value()
        actions.augment('{Ctrl+s}')
        call = Call('SetMicrophone')
        call.addArgument('0')
        call.finalize()
        actions.augment(call)
        call = Call('SetMicrophone')
        call.addArgument('1')
        call.finalize()
        actions.augment(call)
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_5(words[1:], fullResults)

    # dollar <Count>
    def gotResults_6(self, words, fullResults):
        actions = Value()
        actions.augment('$')
        word = fullResults[1 + self.firstWord][0]
        actions.augment(self.get_Count(word))
        actions.perform()
        self.firstWord += 2

    # direction <Directions>
    def gotResults_7(self, words, fullResults):
        actions = Value()
        word = fullResults[1 + self.firstWord][0]
        actions.augment(self.get_Directions(word))
        actions.perform()
        self.firstWord += 2

    # direction <Directions> <Count>
    def gotResults_8(self, words, fullResults):
        actions = Value()
        word = fullResults[1 + self.firstWord][0]
        actions.augment(self.get_Directions(word))
        actions.augment('_')
        word = fullResults[2 + self.firstWord][0]
        actions.augment(self.get_Count(word))
        actions.perform()
        self.firstWord += 3

    # direction <Directions> dollar <Count>
    def gotResults_9(self, words, fullResults):
        actions = Value()
        word = fullResults[1 + self.firstWord][0]
        actions.augment(self.get_Directions(word))
        actions.augment('_')
        actions.augment('$')
        word = fullResults[3 + self.firstWord][0]
        actions.augment(self.get_Count(word))
        actions.perform()
        self.firstWord += 4

    # ((Alt | Control = Ctrl | Shift)) <Letters>
    def gotResults_10(self, words, fullResults):
        actions = Value()
        word = fullResults[0 + self.firstWord][0]
        if word == 'Alt':
            actions.augment('Alt')
        elif word == 'Control':
            actions.augment('Ctrl')
        elif word == 'Shift':
            actions.augment('Shift')
        actions.augment('+')
        word = fullResults[1 + self.firstWord][0]
        actions.augment(self.get_Letters(word))
        actions.perform()
        self.firstWord += 2

    # ((Alt | Control = Ctrl | Shift)) <Letters> <Count>
    def gotResults_11(self, words, fullResults):
        actions = Value()
        word = fullResults[0 + self.firstWord][0]
        if word == 'Alt':
            actions.augment('Alt')
        elif word == 'Control':
            actions.augment('Ctrl')
        elif word == 'Shift':
            actions.augment('Shift')
        actions.augment('+')
        word = fullResults[1 + self.firstWord][0]
        actions.augment(self.get_Letters(word))
        actions.augment('_')
        word = fullResults[2 + self.firstWord][0]
        actions.augment(self.get_Count(word))
        actions.perform()
        self.firstWord += 3

    # <Modifiers> <Letters> dollar <Count>
    def gotResults_12(self, words, fullResults):
        actions = Value()
        word = fullResults[0 + self.firstWord][0]
        actions.augment(self.get_Modifiers(word))
        actions.augment('+')
        word = fullResults[1 + self.firstWord][0]
        actions.augment(self.get_Letters(word))
        actions.augment('_')
        actions.augment('$')
        word = fullResults[3 + self.firstWord][0]
        actions.augment(self.get_Count(word))
        actions.perform()
        self.firstWord += 4

    # ((Alt | Control = Ctrl | Shift)) <Modifiers> <Letters>
    def gotResults_13(self, words, fullResults):
        actions = Value()
        word = fullResults[0 + self.firstWord][0]
        if word == 'Alt':
            actions.augment('Alt')
        elif word == 'Control':
            actions.augment('Ctrl')
        elif word == 'Shift':
            actions.augment('Shift')
        actions.augment('+')
        word = fullResults[1 + self.firstWord][0]
        actions.augment(self.get_Modifiers(word))
        actions.augment('+')
        word = fullResults[2 + self.firstWord][0]
        actions.augment(self.get_Letters(word))
        actions.perform()
        self.firstWord += 3

    # ((Alt | Control = Ctrl | Shift)) [direction] <Directions>
    def gotResults_14(self, words, fullResults):
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'direction':
            fullResults.insert(opt, 'dummy')
        actions = Value()
        word = fullResults[0 + self.firstWord][0]
        if word == 'Alt':
            actions.augment('Alt')
        elif word == 'Control':
            actions.augment('Ctrl')
        elif word == 'Shift':
            actions.augment('Shift')
        actions.augment('+')
        word = fullResults[2 + self.firstWord][0]
        actions.augment(self.get_Directions(word))
        actions.perform()
        self.firstWord += 3

    # ((Alt | Control = Ctrl | Shift)) [direction] <Directions> <Count>
    def gotResults_15(self, words, fullResults):
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'direction':
            fullResults.insert(opt, 'dummy')
        actions = Value()
        word = fullResults[0 + self.firstWord][0]
        if word == 'Alt':
            actions.augment('Alt')
        elif word == 'Control':
            actions.augment('Ctrl')
        elif word == 'Shift':
            actions.augment('Shift')
        actions.augment('+')
        word = fullResults[2 + self.firstWord][0]
        actions.augment(self.get_Directions(word))
        actions.augment('_')
        word = fullResults[3 + self.firstWord][0]
        actions.augment(self.get_Count(word))
        actions.perform()
        self.firstWord += 4

    # <Modifiers> [direction] <Directions> dollar <Count>
    def gotResults_16(self, words, fullResults):
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'direction':
            fullResults.insert(opt, 'dummy')
        actions = Value()
        word = fullResults[0 + self.firstWord][0]
        actions.augment(self.get_Modifiers(word))
        actions.augment('+')
        word = fullResults[2 + self.firstWord][0]
        actions.augment(self.get_Directions(word))
        actions.augment('_')
        actions.augment('$')
        word = fullResults[4 + self.firstWord][0]
        actions.augment(self.get_Count(word))
        actions.perform()
        self.firstWord += 5

    # ((Alt | Control = Ctrl | Shift)) <Modifiers> [direction] <Directions>
    def gotResults_17(self, words, fullResults):
        opt = 2 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'direction':
            fullResults.insert(opt, 'dummy')
        actions = Value()
        word = fullResults[0 + self.firstWord][0]
        if word == 'Alt':
            actions.augment('Alt')
        elif word == 'Control':
            actions.augment('Ctrl')
        elif word == 'Shift':
            actions.augment('Shift')
        actions.augment('+')
        word = fullResults[1 + self.firstWord][0]
        actions.augment(self.get_Modifiers(word))
        actions.augment('+')
        word = fullResults[3 + self.firstWord][0]
        actions.augment(self.get_Directions(word))
        actions.perform()
        self.firstWord += 4

    # ((Alt | Control = Ctrl | Shift)) <Modifiers> [direction] <Directions> <Count>
    def gotResults_18(self, words, fullResults):
        opt = 2 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'direction':
            fullResults.insert(opt, 'dummy')
        actions = Value()
        word = fullResults[0 + self.firstWord][0]
        if word == 'Alt':
            actions.augment('Alt')
        elif word == 'Control':
            actions.augment('Ctrl')
        elif word == 'Shift':
            actions.augment('Shift')
        actions.augment('+')
        word = fullResults[1 + self.firstWord][0]
        actions.augment(self.get_Modifiers(word))
        actions.augment('+')
        word = fullResults[3 + self.firstWord][0]
        actions.augment(self.get_Directions(word))
        actions.augment('_')
        word = fullResults[4 + self.firstWord][0]
        actions.augment(self.get_Count(word))
        actions.perform()
        self.firstWord += 5

    # <Modifiers> <Modifiers> [direction] <Directions> dollar <Count>
    def gotResults_19(self, words, fullResults):
        opt = 2 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'direction':
            fullResults.insert(opt, 'dummy')
        actions = Value()
        word = fullResults[0 + self.firstWord][0]
        actions.augment(self.get_Modifiers(word))
        actions.augment('+')
        word = fullResults[1 + self.firstWord][0]
        actions.augment(self.get_Modifiers(word))
        actions.augment('+')
        word = fullResults[3 + self.firstWord][0]
        actions.augment(self.get_Directions(word))
        actions.augment('_')
        actions.augment('$')
        word = fullResults[5 + self.firstWord][0]
        actions.augment(self.get_Count(word))
        actions.perform()
        self.firstWord += 6

    # insert range 0..99 to 0..99
    def gotResults_20(self, words, fullResults):
        actions = Value()
        word = fullResults[1 + self.firstWord][0]
        actions.augment(word)
        actions.augment('..')
        word = fullResults[3 + self.firstWord][0]
        actions.augment(word)
        actions.perform()
        self.firstWord += 4
        if len(words) > 4: self.gotResults_20(words[4:], fullResults)

    # insert Repeat
    def gotResults_21(self, words, fullResults):
        actions = Value()
        actions.augment('Repeat()')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_21(words[1:], fullResults)

    # insert Active Menu Pick
    def gotResults_22(self, words, fullResults):
        actions = Value()
        actions.augment('ActiveMenuPick()')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_22(words[1:], fullResults)

    # insert Active Control Pick
    def gotResults_23(self, words, fullResults):
        actions = Value()
        actions.augment('ActiveControlPick()')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_23(words[1:], fullResults)

    # insert App Bring Up
    def gotResults_24(self, words, fullResults):
        actions = Value()
        actions.augment('AppBringUp(APPNAME,APPPATH)')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_24(words[1:], fullResults)

    # insert App Swap With
    def gotResults_25(self, words, fullResults):
        actions = Value()
        actions.augment('AppSwapWith(APPNAME)')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_25(words[1:], fullResults)

    # insert Beep
    def gotResults_26(self, words, fullResults):
        actions = Value()
        actions.augment('Beep()')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_26(words[1:], fullResults)

    # insert Left Button Click
    def gotResults_27(self, words, fullResults):
        actions = Value()
        actions.augment('ButtonClick(1,1)')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_27(words[1:], fullResults)

    # insert Right Button Click
    def gotResults_28(self, words, fullResults):
        actions = Value()
        actions.augment('ButtonClick(2,1)')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_28(words[1:], fullResults)

    # insert Left Button Double Click
    def gotResults_29(self, words, fullResults):
        actions = Value()
        actions.augment('ButtonClick(1,2)')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_29(words[1:], fullResults)

    # insert Right Button Double Click
    def gotResults_30(self, words, fullResults):
        actions = Value()
        actions.augment('ButtonClick(1,2)')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_30(words[1:], fullResults)

    # insert Clear Desktop
    def gotResults_31(self, words, fullResults):
        actions = Value()
        actions.augment('ClearDesktop()')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_31(words[1:], fullResults)

    # insert Control Pick
    def gotResults_32(self, words, fullResults):
        actions = Value()
        actions.augment('ControlPick(CONTROLNAME)')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_32(words[1:], fullResults)

    # insert DDE Execute
    def gotResults_33(self, words, fullResults):
        actions = Value()
        actions.augment('DdeExecute(APP, TOPIC, COMMANDSTRING)')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_33(words[1:], fullResults)

    # insert DDE Poke
    def gotResults_34(self, words, fullResults):
        actions = Value()
        actions.augment('DdeExecute(APP, TOPIC, ITEM, VALUE)')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_34(words[1:], fullResults)

    # insert DLL Call
    def gotResults_35(self, words, fullResults):
        actions = Value()
        actions.augment('DllCall(LIB, FUNC, STRINGARG)')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_35(words[1:], fullResults)

    # insert Drag To Point (Left = 1 | Right = 2 | Middle = 4)
    def gotResults_36(self, words, fullResults):
        actions = Value()
        actions.augment('DragToPoint(')
        word = fullResults[1 + self.firstWord][0]
        if word == 'Left':
            actions.augment('1')
        elif word == 'Right':
            actions.augment('2')
        elif word == 'Middle':
            actions.augment('4')
        actions.augment(')')
        actions.perform()
        self.firstWord += 2
        if len(words) > 2: self.gotResults_36(words[2:], fullResults)

    # insert eval
    def gotResults_37(self, words, fullResults):
        actions = Value()
        actions.augment('Eval()')
        actions.augment('{Left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_37(words[1:], fullResults)

    # insert Go To Sleep
    def gotResults_38(self, words, fullResults):
        actions = Value()
        actions.augment('GoToSleep()')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_38(words[1:], fullResults)

    # insert Menu Cancel
    def gotResults_39(self, words, fullResults):
        actions = Value()
        actions.augment('MenuCancel()')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_39(words[1:], fullResults)

    # insert MenuPick
    def gotResults_40(self, words, fullResults):
        actions = Value()
        actions.augment('MenuPick()')
        actions.augment('{Left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_40(words[1:], fullResults)

    # insert Mouse Grid
    def gotResults_41(self, words, fullResults):
        actions = Value()
        actions.augment('MouseGrid()')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_41(words[1:], fullResults)

    # insert Message box confirm
    def gotResults_42(self, words, fullResults):
        actions = Value()
        actions.augment('MsgBoxConfirm(MESSAGE, TYPE, TITLE)')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_42(words[1:], fullResults)

    # insert Play Sound
    def gotResults_43(self, words, fullResults):
        actions = Value()
        actions.augment('PlaySound( WAVEFILE )')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_43(words[1:], fullResults)

    # insert Remember Point
    def gotResults_44(self, words, fullResults):
        actions = Value()
        actions.augment('RememberPoint()')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_44(words[1:], fullResults)

    # insert Repeat
    def gotResults_45(self, words, fullResults):
        actions = Value()
        actions.augment('Repeat()')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_45(words[1:], fullResults)

    # insert Run Script File
    def gotResults_46(self, words, fullResults):
        actions = Value()
        actions.augment('RunScriptFile(COMMAND_FILE)')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_46(words[1:], fullResults)

    # insert Send Keys
    def gotResults_47(self, words, fullResults):
        actions = Value()
        actions.augment('SendKeys("")')
        actions.augment('{Left 2}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_47(words[1:], fullResults)

    # insert Send System Keys
    def gotResults_48(self, words, fullResults):
        actions = Value()
        actions.augment('SendSystemKeys("{}")')
        actions.augment('{Left 2}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_48(words[1:], fullResults)

    # insert Set Microphone (On = 1 | Off = 0)
    def gotResults_49(self, words, fullResults):
        actions = Value()
        actions.augment('SetMicrophone(')
        word = fullResults[1 + self.firstWord][0]
        if word == 'On':
            actions.augment('1')
        elif word == 'Off':
            actions.augment('0')
        actions.augment(')')
        actions.perform()
        self.firstWord += 2
        if len(words) > 2: self.gotResults_49(words[2:], fullResults)

    # insert Set Natural Text
    def gotResults_50(self, words, fullResults):
        actions = Value()
        actions.augment('SetNaturalText(1)')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_50(words[1:], fullResults)

    # insert ShellExecute
    def gotResults_51(self, words, fullResults):
        actions = Value()
        actions.augment('ShellExecute("COMMAND")')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_51(words[1:], fullResults)

    # insert Shift Key (Shift = 1 | Control = 2 | Alt = 3)
    def gotResults_52(self, words, fullResults):
        actions = Value()
        actions.augment('ShiftKey(')
        word = fullResults[1 + self.firstWord][0]
        if word == 'Shift':
            actions.augment('1')
        elif word == 'Control':
            actions.augment('2')
        elif word == 'Alt':
            actions.augment('3')
        actions.augment(')')
        actions.perform()
        self.firstWord += 2
        if len(words) > 2: self.gotResults_52(words[2:], fullResults)

    # insert TTS Play String
    def gotResults_53(self, words, fullResults):
        actions = Value()
        actions.augment('TTSPlayString()')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_53(words[1:], fullResults)

    # insert Wait 1..1000
    def gotResults_54(self, words, fullResults):
        actions = Value()
        actions.augment('Wait(')
        word = fullResults[1 + self.firstWord][0]
        actions.augment(word)
        actions.augment(')')
        actions.perform()
        self.firstWord += 2
        if len(words) > 2: self.gotResults_54(words[2:], fullResults)

    # insert Wake Up
    def gotResults_55(self, words, fullResults):
        actions = Value()
        actions.augment('WakeUp()')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_55(words[1:], fullResults)

    # insert WinHelp
    def gotResults_56(self, words, fullResults):
        actions = Value()
        actions.augment('WinHelp()')
        actions.augment('{left}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_56(words[1:], fullResults)

    # insert Set Mouse Position 1..99 by 1..10
    def gotResults_57(self, words, fullResults):
        actions = Value()
        actions.augment('SetMousePosition (1, ')
        word = fullResults[1 + self.firstWord][0]
        actions.augment(word)
        actions.augment(' , ')
        word = fullResults[3 + self.firstWord][0]
        actions.augment(word)
        actions.augment(' )')
        actions.perform()
        self.firstWord += 4
        if len(words) > 4: self.gotResults_57(words[4:], fullResults)

    # next word <_anything>
    def gotResults_58(self, words, fullResults):
        actions = Value()
        actions.augment('{right 2}')
        actions.augment(',"')
        fullResults = combineDictationWords(fullResults)
        i = 1 + self.firstWord
        if (len(fullResults) <= i) or (fullResults[i][1] != 'dgndictation'):
            fullResults.insert(i, ['','dummy'])
        word = fullResults[1 + self.firstWord][0]
        actions.augment(word)
        actions.augment('"')
        actions.augment('{Left}')
        actions.perform()
        self.firstWord += 2

    # nsert Heard Word <_anything>
    def gotResults_59(self, words, fullResults):
        actions = Value()
        actions.augment('HeardWord("')
        fullResults = combineDictationWords(fullResults)
        i = 1 + self.firstWord
        if (len(fullResults) <= i) or (fullResults[i][1] != 'dgndictation'):
            fullResults.insert(i, ['','dummy'])
        word = fullResults[1 + self.firstWord][0]
        actions.augment(word)
        actions.augment('")')
        actions.augment('{Left 2}')
        actions.perform()
        self.firstWord += 2

    # new choice list
    def gotResults_60(self, words, fullResults):
        actions = Value()
        actions.augment(':= ();')
        actions.augment('{Left 2}')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_60(words[1:], fullResults)

    # or
    def gotResults_61(self, words, fullResults):
        actions = Value()
        actions.augment('|')
        actions.perform()
        self.firstWord += 1
        if len(words) > 1: self.gotResults_61(words[1:], fullResults)

    # control key <Modifiers>
    def gotResults_62(self, words, fullResults):
        actions = Value()
        word = fullResults[1 + self.firstWord][0]
        actions.augment(self.get_Modifiers(word))
        actions.perform()
        self.firstWord += 2

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
